
segment_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002378  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002500  08002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002518  08002518  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002518  08002518  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002518  08002518  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002518  08002518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000020  0800253c  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  0800253c  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055c7  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001017  00000000  00000000  00025613  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000670  00000000  00000000  00026630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d8  00000000  00000000  00026ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000044d4  00000000  00000000  00027278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004514  00000000  00000000  0002b74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075bee  00000000  00000000  0002fc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a584e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001874  00000000  00000000  000a58cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024e8 	.word	0x080024e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080024e8 	.word	0x080024e8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001d8:	b480      	push	{r7}
 80001da:	b089      	sub	sp, #36	; 0x24
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	fa93 f3a3 	rbit	r3, r3
 80001f2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	fab3 f383 	clz	r3, r3
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	2103      	movs	r1, #3
 80001fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000202:	43db      	mvns	r3, r3
 8000204:	401a      	ands	r2, r3
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020a:	69fb      	ldr	r3, [r7, #28]
 800020c:	fa93 f3a3 	rbit	r3, r3
 8000210:	61bb      	str	r3, [r7, #24]
  return(result);
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	fab3 f383 	clz	r3, r3
 8000218:	005b      	lsls	r3, r3, #1
 800021a:	6879      	ldr	r1, [r7, #4]
 800021c:	fa01 f303 	lsl.w	r3, r1, r3
 8000220:	431a      	orrs	r2, r3
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	601a      	str	r2, [r3, #0]
}
 8000226:	bf00      	nop
 8000228:	3724      	adds	r7, #36	; 0x24
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr

08000232 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000232:	b480      	push	{r7}
 8000234:	b085      	sub	sp, #20
 8000236:	af00      	add	r7, sp, #0
 8000238:	60f8      	str	r0, [r7, #12]
 800023a:	60b9      	str	r1, [r7, #8]
 800023c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	685a      	ldr	r2, [r3, #4]
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	43db      	mvns	r3, r3
 8000246:	401a      	ands	r2, r3
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	fb01 f303 	mul.w	r3, r1, r3
 8000250:	431a      	orrs	r2, r3
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	605a      	str	r2, [r3, #4]
}
 8000256:	bf00      	nop
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000262:	b480      	push	{r7}
 8000264:	b089      	sub	sp, #36	; 0x24
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	689a      	ldr	r2, [r3, #8]
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	fa93 f3a3 	rbit	r3, r3
 800027c:	613b      	str	r3, [r7, #16]
  return(result);
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	fab3 f383 	clz	r3, r3
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	2103      	movs	r1, #3
 8000288:	fa01 f303 	lsl.w	r3, r1, r3
 800028c:	43db      	mvns	r3, r3
 800028e:	401a      	ands	r2, r3
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	fa93 f3a3 	rbit	r3, r3
 800029a:	61bb      	str	r3, [r7, #24]
  return(result);
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	fab3 f383 	clz	r3, r3
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	6879      	ldr	r1, [r7, #4]
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	431a      	orrs	r2, r3
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002b0:	bf00      	nop
 80002b2:	3724      	adds	r7, #36	; 0x24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	fa93 f3a3 	rbit	r3, r3
 80002d6:	613b      	str	r3, [r7, #16]
  return(result);
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	fab3 f383 	clz	r3, r3
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	2103      	movs	r1, #3
 80002e2:	fa01 f303 	lsl.w	r3, r1, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	401a      	ands	r2, r3
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	fa93 f3a3 	rbit	r3, r3
 80002f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002f6:	69bb      	ldr	r3, [r7, #24]
 80002f8:	fab3 f383 	clz	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	431a      	orrs	r2, r3
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	60da      	str	r2, [r3, #12]
}
 800030a:	bf00      	nop
 800030c:	3724      	adds	r7, #36	; 0x24
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000316:	b480      	push	{r7}
 8000318:	b089      	sub	sp, #36	; 0x24
 800031a:	af00      	add	r7, sp, #0
 800031c:	60f8      	str	r0, [r7, #12]
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	6a1a      	ldr	r2, [r3, #32]
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	fa93 f3a3 	rbit	r3, r3
 8000330:	613b      	str	r3, [r7, #16]
  return(result);
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	fab3 f383 	clz	r3, r3
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	210f      	movs	r1, #15
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	401a      	ands	r2, r3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	fa93 f3a3 	rbit	r3, r3
 800034e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	fab3 f383 	clz	r3, r3
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000364:	bf00      	nop
 8000366:	3724      	adds	r7, #36	; 0x24
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000370:	b480      	push	{r7}
 8000372:	b089      	sub	sp, #36	; 0x24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	0a1b      	lsrs	r3, r3, #8
 8000384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	fa93 f3a3 	rbit	r3, r3
 800038c:	613b      	str	r3, [r7, #16]
  return(result);
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	fab3 f383 	clz	r3, r3
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	210f      	movs	r1, #15
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	43db      	mvns	r3, r3
 800039e:	401a      	ands	r2, r3
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	0a1b      	lsrs	r3, r3, #8
 80003a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	fa93 f3a3 	rbit	r3, r3
 80003ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80003ae:	69bb      	ldr	r3, [r7, #24]
 80003b0:	fab3 f383 	clz	r3, r3
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	6879      	ldr	r1, [r7, #4]
 80003b8:	fa01 f303 	lsl.w	r3, r1, r3
 80003bc:	431a      	orrs	r2, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003c2:	bf00      	nop
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b088      	sub	sp, #32
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	fa93 f3a3 	rbit	r3, r3
 80003ec:	613b      	str	r3, [r7, #16]
  return(result);
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	fab3 f383 	clz	r3, r3
 80003f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003f6:	e048      	b.n	800048a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	2101      	movs	r1, #1
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	4013      	ands	r3, r2
 8000406:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d03a      	beq.n	8000484 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	461a      	mov	r2, r3
 8000414:	69b9      	ldr	r1, [r7, #24]
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff fede 	bl	80001d8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d003      	beq.n	800042c <LL_GPIO_Init+0x5e>
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d106      	bne.n	800043a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	461a      	mov	r2, r3
 8000432:	69b9      	ldr	r1, [r7, #24]
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f7ff ff14 	bl	8000262 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	461a      	mov	r2, r3
 8000440:	69b9      	ldr	r1, [r7, #24]
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f7ff ff3a 	bl	80002bc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d119      	bne.n	8000484 <LL_GPIO_Init+0xb6>
 8000450:	69bb      	ldr	r3, [r7, #24]
 8000452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	fa93 f3a3 	rbit	r3, r3
 800045a:	60bb      	str	r3, [r7, #8]
  return(result);
 800045c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800045e:	fab3 f383 	clz	r3, r3
 8000462:	2b07      	cmp	r3, #7
 8000464:	d807      	bhi.n	8000476 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff51 	bl	8000316 <LL_GPIO_SetAFPin_0_7>
 8000474:	e006      	b.n	8000484 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	461a      	mov	r2, r3
 800047c:	69b9      	ldr	r1, [r7, #24]
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ff76 	bl	8000370 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	3301      	adds	r3, #1
 8000488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	fa22 f303 	lsr.w	r3, r2, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1af      	bne.n	80003f8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d003      	beq.n	80004a8 <LL_GPIO_Init+0xda>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d107      	bne.n	80004b8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6819      	ldr	r1, [r3, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	461a      	mov	r2, r3
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff febd 	bl	8000232 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	683a      	ldr	r2, [r7, #0]
 80004d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	631a      	str	r2, [r3, #48]	; 0x30
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	683a      	ldr	r2, [r7, #0]
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	683a      	ldr	r2, [r7, #0]
 8000578:	641a      	str	r2, [r3, #64]	; 0x40
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f043 0201 	orr.w	r2, r3, #1
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	615a      	str	r2, [r3, #20]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <LL_TIM_Init+0xd4>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d007      	beq.n	800060c <LL_TIM_Init+0x2c>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000602:	d003      	beq.n	800060c <LL_TIM_Init+0x2c>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a2c      	ldr	r2, [pc, #176]	; (80006b8 <LL_TIM_Init+0xd8>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d106      	bne.n	800061a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	4313      	orrs	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <LL_TIM_Init+0xd4>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d013      	beq.n	800064a <LL_TIM_Init+0x6a>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000628:	d00f      	beq.n	800064a <LL_TIM_Init+0x6a>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <LL_TIM_Init+0xd8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d00b      	beq.n	800064a <LL_TIM_Init+0x6a>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <LL_TIM_Init+0xdc>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d007      	beq.n	800064a <LL_TIM_Init+0x6a>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <LL_TIM_Init+0xe0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d003      	beq.n	800064a <LL_TIM_Init+0x6a>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <LL_TIM_Init+0xe4>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d106      	bne.n	8000658 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4313      	orrs	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	4619      	mov	r1, r3
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff3a 	bl	80004de <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff26 	bl	80004c2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <LL_TIM_Init+0xd4>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d00b      	beq.n	8000696 <LL_TIM_Init+0xb6>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <LL_TIM_Init+0xdc>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d007      	beq.n	8000696 <LL_TIM_Init+0xb6>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <LL_TIM_Init+0xe0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d003      	beq.n	8000696 <LL_TIM_Init+0xb6>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <LL_TIM_Init+0xe4>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d105      	bne.n	80006a2 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	7c1b      	ldrb	r3, [r3, #16]
 800069a:	4619      	mov	r1, r3
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff2c 	bl	80004fa <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ff8b 	bl	80005be <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40012c00 	.word	0x40012c00
 80006b8:	40000400 	.word	0x40000400
 80006bc:	40014000 	.word	0x40014000
 80006c0:	40014400 	.word	0x40014400
 80006c4:	40014800 	.word	0x40014800

080006c8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80006d4:	2301      	movs	r3, #1
 80006d6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006de:	d01f      	beq.n	8000720 <LL_TIM_OC_Init+0x58>
 80006e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006e4:	d804      	bhi.n	80006f0 <LL_TIM_OC_Init+0x28>
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d00c      	beq.n	8000704 <LL_TIM_OC_Init+0x3c>
 80006ea:	2b10      	cmp	r3, #16
 80006ec:	d011      	beq.n	8000712 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80006ee:	e033      	b.n	8000758 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80006f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006f4:	d022      	beq.n	800073c <LL_TIM_OC_Init+0x74>
 80006f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006fa:	d026      	beq.n	800074a <LL_TIM_OC_Init+0x82>
 80006fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000700:	d015      	beq.n	800072e <LL_TIM_OC_Init+0x66>
      break;
 8000702:	e029      	b.n	8000758 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f000 f82c 	bl	8000764 <OC1Config>
 800070c:	4603      	mov	r3, r0
 800070e:	75fb      	strb	r3, [r7, #23]
      break;
 8000710:	e022      	b.n	8000758 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f000 f8a5 	bl	8000864 <OC2Config>
 800071a:	4603      	mov	r3, r0
 800071c:	75fb      	strb	r3, [r7, #23]
      break;
 800071e:	e01b      	b.n	8000758 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f000 f922 	bl	800096c <OC3Config>
 8000728:	4603      	mov	r3, r0
 800072a:	75fb      	strb	r3, [r7, #23]
      break;
 800072c:	e014      	b.n	8000758 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 f99f 	bl	8000a74 <OC4Config>
 8000736:	4603      	mov	r3, r0
 8000738:	75fb      	strb	r3, [r7, #23]
      break;
 800073a:	e00d      	b.n	8000758 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800073c:	6879      	ldr	r1, [r7, #4]
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f000 fa04 	bl	8000b4c <OC5Config>
 8000744:	4603      	mov	r3, r0
 8000746:	75fb      	strb	r3, [r7, #23]
      break;
 8000748:	e006      	b.n	8000758 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f000 fa5f 	bl	8000c10 <OC6Config>
 8000752:	4603      	mov	r3, r0
 8000754:	75fb      	strb	r3, [r7, #23]
      break;
 8000756:	bf00      	nop
  }

  return result;
 8000758:	7dfb      	ldrb	r3, [r7, #23]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	f023 0201 	bic.w	r2, r3, #1
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f023 0303 	bic.w	r3, r3, #3
 800079e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	f023 0202 	bic.w	r2, r3, #2
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	4313      	orrs	r3, r2
 80007be:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	f023 0201 	bic.w	r2, r3, #1
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <OC1Config+0xf0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d00b      	beq.n	80007ee <OC1Config+0x8a>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <OC1Config+0xf4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d007      	beq.n	80007ee <OC1Config+0x8a>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a1e      	ldr	r2, [pc, #120]	; (800085c <OC1Config+0xf8>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d003      	beq.n	80007ee <OC1Config+0x8a>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <OC1Config+0xfc>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d11e      	bne.n	800082c <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	f023 0208 	bic.w	r2, r3, #8
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4313      	orrs	r3, r2
 80007fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	f023 0204 	bic.w	r2, r3, #4
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4313      	orrs	r3, r2
 800080c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4313      	orrs	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4619      	mov	r1, r3
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fe69 	bl	8000516 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40012c00 	.word	0x40012c00
 8000858:	40014000 	.word	0x40014000
 800085c:	40014400 	.word	0x40014400
 8000860:	40014800 	.word	0x40014800

08000864 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	f023 0210 	bic.w	r2, r3, #16
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800089e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	0212      	lsls	r2, r2, #8
 80008b0:	4313      	orrs	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	f023 0220 	bic.w	r2, r3, #32
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	4313      	orrs	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	f023 0210 	bic.w	r2, r3, #16
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	4313      	orrs	r3, r2
 80008d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <OC2Config+0xf8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d00b      	beq.n	80008f4 <OC2Config+0x90>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <OC2Config+0xfc>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d007      	beq.n	80008f4 <OC2Config+0x90>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a1f      	ldr	r2, [pc, #124]	; (8000964 <OC2Config+0x100>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d003      	beq.n	80008f4 <OC2Config+0x90>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a1e      	ldr	r2, [pc, #120]	; (8000968 <OC2Config+0x104>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d11f      	bne.n	8000934 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	019b      	lsls	r3, r3, #6
 8000900:	4313      	orrs	r3, r2
 8000902:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	019b      	lsls	r3, r3, #6
 8000910:	4313      	orrs	r3, r2
 8000912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	4619      	mov	r1, r3
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fdf3 	bl	8000532 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40012c00 	.word	0x40012c00
 8000960:	40014000 	.word	0x40014000
 8000964:	40014400 	.word	0x40014400
 8000968:	40014800 	.word	0x40014800

0800096c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a1b      	ldr	r3, [r3, #32]
 8000992:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f023 0303 	bic.w	r3, r3, #3
 80009a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	021b      	lsls	r3, r3, #8
 80009c6:	4313      	orrs	r3, r2
 80009c8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	4313      	orrs	r3, r2
 80009d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <OC3Config+0xf8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d00b      	beq.n	80009fa <OC3Config+0x8e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <OC3Config+0xfc>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d007      	beq.n	80009fa <OC3Config+0x8e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <OC3Config+0x100>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d003      	beq.n	80009fa <OC3Config+0x8e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <OC3Config+0x104>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d11f      	bne.n	8000a3a <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	029b      	lsls	r3, r3, #10
 8000a06:	4313      	orrs	r3, r2
 8000a08:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	029b      	lsls	r3, r3, #10
 8000a16:	4313      	orrs	r3, r2
 8000a18:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	011b      	lsls	r3, r3, #4
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	015b      	lsls	r3, r3, #5
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fd7e 	bl	800054e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40012c00 	.word	0x40012c00
 8000a68:	40014000 	.word	0x40014000
 8000a6c:	40014400 	.word	0x40014400
 8000a70:	40014800 	.word	0x40014800

08000a74 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6a1b      	ldr	r3, [r3, #32]
 8000a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aae:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	0212      	lsls	r2, r2, #8
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	031b      	lsls	r3, r3, #12
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	031b      	lsls	r3, r3, #12
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <OC4Config+0xc8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d00b      	beq.n	8000b04 <OC4Config+0x90>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <OC4Config+0xcc>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d007      	beq.n	8000b04 <OC4Config+0x90>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <OC4Config+0xd0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d003      	beq.n	8000b04 <OC4Config+0x90>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <OC4Config+0xd4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d107      	bne.n	8000b14 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	019b      	lsls	r3, r3, #6
 8000b10:	4313      	orrs	r3, r2
 8000b12:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	4619      	mov	r1, r3
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fd1f 	bl	800056a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40012c00 	.word	0x40012c00
 8000b40:	40014000 	.word	0x40014000
 8000b44:	40014400 	.word	0x40014400
 8000b48:	40014800 	.word	0x40014800

08000b4c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a1b      	ldr	r3, [r3, #32]
 8000b62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a1b      	ldr	r3, [r3, #32]
 8000b6e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	041b      	lsls	r3, r3, #16
 8000b94:	4313      	orrs	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	041b      	lsls	r3, r3, #16
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <OC5Config+0xb4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d00b      	beq.n	8000bc8 <OC5Config+0x7c>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <OC5Config+0xb8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d007      	beq.n	8000bc8 <OC5Config+0x7c>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <OC5Config+0xbc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d003      	beq.n	8000bc8 <OC5Config+0x7c>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <OC5Config+0xc0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d109      	bne.n	8000bdc <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	4619      	mov	r1, r3
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff fccc 	bl	8000586 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40012c00 	.word	0x40012c00
 8000c04:	40014000 	.word	0x40014000
 8000c08:	40014400 	.word	0x40014400
 8000c0c:	40014800 	.word	0x40014800

08000c10 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	6812      	ldr	r2, [r2, #0]
 8000c48:	0212      	lsls	r2, r2, #8
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	051b      	lsls	r3, r3, #20
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	051b      	lsls	r3, r3, #20
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <OC6Config+0xb4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d00b      	beq.n	8000c8e <OC6Config+0x7e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <OC6Config+0xb8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d007      	beq.n	8000c8e <OC6Config+0x7e>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <OC6Config+0xbc>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d003      	beq.n	8000c8e <OC6Config+0x7e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <OC6Config+0xc0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d109      	bne.n	8000ca2 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	029b      	lsls	r3, r3, #10
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	4619      	mov	r1, r3
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fc77 	bl	80005a2 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40012c00 	.word	0x40012c00
 8000cc8:	40014000 	.word	0x40014000
 8000ccc:	40014400 	.word	0x40014400
 8000cd0:	40014800 	.word	0x40014800

08000cd4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <LL_InitTick+0x30>)
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <LL_InitTick+0x30>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <LL_InitTick+0x30>)
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000d10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ffdd 	bl	8000cd4 <LL_InitTick>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <LL_mDelay+0x44>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000d32:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3a:	d00c      	beq.n	8000d56 <LL_mDelay+0x32>
  {
    Delay++;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000d42:	e008      	b.n	8000d56 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <LL_mDelay+0x44>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <LL_mDelay+0x32>
    {
      Delay--;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f3      	bne.n	8000d44 <LL_mDelay+0x20>
    }
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <LL_SetSystemCoreClock+0x1c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000018 	.word	0x20000018

08000d8c <LL_TIM_ClearFlag_UPDATE>:
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f06f 0201 	mvn.w	r2, #1
 8000d9a:	611a      	str	r2, [r3, #16]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	bf0c      	ite	eq
 8000dbc:	2301      	moveq	r3, #1
 8000dbe:	2300      	movne	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	619a      	str	r2, [r3, #24]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f7ff ffdb 	bl	8000dce <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f7ff ffd5 	bl	8000dce <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000e24:	2102      	movs	r1, #2
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <resetSegments+0x58>)
 8000e28:	f7ff ffd1 	bl	8000dce <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <resetSegments+0x58>)
 8000e30:	f7ff ffcd 	bl	8000dce <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000e34:	2110      	movs	r1, #16
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <resetSegments+0x58>)
 8000e38:	f7ff ffc9 	bl	8000dce <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f7ff ffc4 	bl	8000dce <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000e46:	2102      	movs	r1, #2
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f7ff ffbf 	bl	8000dce <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000e50:	2108      	movs	r1, #8
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f7ff ffba 	bl	8000dce <LL_GPIO_SetOutputPin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	48000400 	.word	0x48000400

08000e64 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f7ff ffbb 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f7ff ffb5 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000e80:	2102      	movs	r1, #2
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <setSegments+0x58>)
 8000e84:	f7ff ffb1 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000e88:	2120      	movs	r1, #32
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <setSegments+0x58>)
 8000e8c:	f7ff ffad 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000e90:	2110      	movs	r1, #16
 8000e92:	480a      	ldr	r0, [pc, #40]	; (8000ebc <setSegments+0x58>)
 8000e94:	f7ff ffa9 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f7ff ffa4 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f7ff ff9f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000eac:	2108      	movs	r1, #8
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f7ff ff9a 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f7ff ff8e 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000ece:	2120      	movs	r1, #32
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f7ff ff89 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000ed8:	2110      	movs	r1, #16
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f7ff ff84 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8000ee2:	2140      	movs	r1, #64	; 0x40
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f7ff ff7f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f7ff ff7a 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000efe:	2120      	movs	r1, #32
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f7ff ff63 	bl	8000dce <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000f08:	2110      	movs	r1, #16
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f7ff ff5e 	bl	8000dce <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f7ff ff59 	bl	8000dce <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f22:	f7ff ff54 	bl	8000dce <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f7ff ff4f 	bl	8000dce <LL_GPIO_SetOutputPin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <set_1>:
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
}

/* Functions to display numbers 0 - 9 */
void set_1(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f38:	2101      	movs	r1, #1
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f7ff ff54 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f7ff ff4e 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <set_2>:

void set_2(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f7ff ff44 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000f62:	2102      	movs	r1, #2
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f7ff ff3f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <set_2+0x38>)
 8000f70:	f7ff ff3b 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f7ff ff35 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000f80:	2120      	movs	r1, #32
 8000f82:	4802      	ldr	r0, [pc, #8]	; (8000f8c <set_2+0x38>)
 8000f84:	f7ff ff31 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	48000400 	.word	0x48000400

08000f90 <set_3>:

void set_3(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f94:	2101      	movs	r1, #1
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f7ff ff26 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f7ff ff21 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000fa8:	2110      	movs	r1, #16
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <set_3+0x38>)
 8000fac:	f7ff ff1d 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f7ff ff17 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <set_3+0x38>)
 8000fc0:	f7ff ff13 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	48000400 	.word	0x48000400

08000fcc <set_4>:

void set_4(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f7ff ff08 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe0:	f7ff ff03 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <set_4+0x30>)
 8000fe8:	f7ff feff 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f7ff fef9 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	48000400 	.word	0x48000400

08001000 <set_5>:

void set_5(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001004:	2108      	movs	r1, #8
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f7ff feee 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800100e:	2120      	movs	r1, #32
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <set_5+0x38>)
 8001012:	f7ff feea 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001016:	2110      	movs	r1, #16
 8001018:	4807      	ldr	r0, [pc, #28]	; (8001038 <set_5+0x38>)
 800101a:	f7ff fee6 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f7ff fee0 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800102a:	2102      	movs	r1, #2
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f7ff fedb 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	48000400 	.word	0x48000400

0800103c <set_6>:

void set_6(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001040:	2108      	movs	r1, #8
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f7ff fed0 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800104a:	2120      	movs	r1, #32
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <set_6+0x44>)
 800104e:	f7ff fecc 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001052:	2110      	movs	r1, #16
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <set_6+0x44>)
 8001056:	f7ff fec8 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f7ff fec2 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001066:	2102      	movs	r1, #2
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f7ff febd 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f7ff feb7 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	48000400 	.word	0x48000400

08001084 <set_7>:

void set_7(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001088:	2101      	movs	r1, #1
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f7ff feac 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f7ff fea6 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800109e:	2102      	movs	r1, #2
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f7ff fea1 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <set_8>:

void set_8(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80010b0:	2108      	movs	r1, #8
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f7ff fe98 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80010ba:	2120      	movs	r1, #32
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <set_8+0x50>)
 80010be:	f7ff fe94 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80010c2:	2110      	movs	r1, #16
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <set_8+0x50>)
 80010c6:	f7ff fe90 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f7ff fe8a 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80010d6:	2102      	movs	r1, #2
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f7ff fe85 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f7ff fe7f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80010ec:	2101      	movs	r1, #1
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f7ff fe7a 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	48000400 	.word	0x48000400

08001100 <set_9>:

void set_9(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001104:	2101      	movs	r1, #1
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f7ff fe6e 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f7ff fe68 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800111a:	2102      	movs	r1, #2
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f7ff fe63 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001124:	2110      	movs	r1, #16
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <set_9+0x3c>)
 8001128:	f7ff fe5f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800112c:	2108      	movs	r1, #8
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f7ff fe5a 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	48000400 	.word	0x48000400

08001140 <set_0>:

void set_0(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001144:	2108      	movs	r1, #8
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f7ff fe4e 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800114e:	2120      	movs	r1, #32
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <set_0+0x48>)
 8001152:	f7ff fe4a 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f7ff fe44 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001162:	2102      	movs	r1, #2
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f7ff fe3f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800116c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f7ff fe39 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001178:	2101      	movs	r1, #1
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f7ff fe34 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	48000400 	.word	0x48000400

0800118c <set_A>:

void set_A(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001190:	2108      	movs	r1, #8
 8001192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001196:	f7ff fe28 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f7ff fe22 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80011a6:	2102      	movs	r1, #2
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f7ff fe1d 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f7ff fe17 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80011bc:	2101      	movs	r1, #1
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f7ff fe12 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80011c6:	2110      	movs	r1, #16
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <set_A+0x48>)
 80011ca:	f7ff fe0e 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	48000400 	.word	0x48000400

080011d8 <set_a>:


void set_a(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	//1	1	1	1	1	0	1

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 80011dc:	2102      	movs	r1, #2
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f7ff fe02 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 80011e6:	2101      	movs	r1, #1
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f7ff fdfd 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 80011f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f7ff fdf7 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 80011fc:	2120      	movs	r1, #32
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <set_a+0x44>)
 8001200:	f7ff fdf3 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f7ff fded 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 8001210:	2110      	movs	r1, #16
 8001212:	4802      	ldr	r0, [pc, #8]	; (800121c <set_a+0x44>)
 8001214:	f7ff fde9 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	48000400 	.word	0x48000400

08001220 <set_b>:

void set_b(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	//0	0	1	1	1	1	1

	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 8001224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f7ff fddd 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 8001230:	2120      	movs	r1, #32
 8001232:	480a      	ldr	r0, [pc, #40]	; (800125c <set_b+0x3c>)
 8001234:	f7ff fdd9 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f7ff fdd3 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 8001244:	2108      	movs	r1, #8
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f7ff fdce 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 800124e:	2110      	movs	r1, #16
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <set_b+0x3c>)
 8001252:	f7ff fdca 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	48000400 	.word	0x48000400

08001260 <set_C>:

void set_C(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	//1	0	0	1	1	1	0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 8001264:	2102      	movs	r1, #2
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f7ff fdbe 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 800126e:	2120      	movs	r1, #32
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <set_C+0x30>)
 8001272:	f7ff fdba 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f7ff fdb4 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 8001282:	2108      	movs	r1, #8
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f7ff fdaf 	bl	8000dea <LL_GPIO_ResetOutputPin>


}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	48000400 	.word	0x48000400

08001294 <set_c>:

void set_c(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	//0	0	0	1	1	0	1


	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 8001298:	2120      	movs	r1, #32
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <set_c+0x24>)
 800129c:	f7ff fda5 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 80012a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a8:	f7ff fd9f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 80012ac:	2110      	movs	r1, #16
 80012ae:	4802      	ldr	r0, [pc, #8]	; (80012b8 <set_c+0x24>)
 80012b0:	f7ff fd9b 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	48000400 	.word	0x48000400

080012bc <set_d>:

void set_d(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	//	0	1	1	1	1	0	1

	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 80012c0:	2101      	movs	r1, #1
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f7ff fd90 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 80012ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f7ff fd8a 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 80012d6:	2120      	movs	r1, #32
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <set_d+0x3c>)
 80012da:	f7ff fd86 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 80012de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f7ff fd80 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 80012ea:	2110      	movs	r1, #16
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <set_d+0x3c>)
 80012ee:	f7ff fd7c 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	48000400 	.word	0x48000400

080012fc <set_E>:

void set_E(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	//	1	0	0	1	1	1	1

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 8001300:	2102      	movs	r1, #2
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f7ff fd70 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 800130a:	2120      	movs	r1, #32
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <set_E+0x38>)
 800130e:	f7ff fd6c 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f7ff fd66 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 800131e:	2108      	movs	r1, #8
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f7ff fd61 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 8001328:	2110      	movs	r1, #16
 800132a:	4802      	ldr	r0, [pc, #8]	; (8001334 <set_E+0x38>)
 800132c:	f7ff fd5d 	bl	8000dea <LL_GPIO_ResetOutputPin>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	48000400 	.word	0x48000400

08001338 <set_F>:

void set_F(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	//	1	0	0	0	1	1	1

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 800133c:	2102      	movs	r1, #2
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f7ff fd52 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134e:	f7ff fd4c 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 8001352:	2108      	movs	r1, #8
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f7ff fd47 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 800135c:	2110      	movs	r1, #16
 800135e:	4802      	ldr	r0, [pc, #8]	; (8001368 <set_F+0x30>)
 8001360:	f7ff fd43 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	48000400 	.word	0x48000400

0800136c <set_G>:

void set_G(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	//	1	0	1	1	1	1	0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 8001370:	2102      	movs	r1, #2
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f7ff fd38 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 800137a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f7ff fd32 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 8001386:	2120      	movs	r1, #32
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <set_G+0x3c>)
 800138a:	f7ff fd2e 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 800138e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001396:	f7ff fd28 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 800139a:	2108      	movs	r1, #8
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f7ff fd23 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	48000400 	.word	0x48000400

080013ac <set_H>:

void set_H(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	//	0	1	1	0	1	1	1

	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 80013b0:	2101      	movs	r1, #1
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b6:	f7ff fd18 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f7ff fd12 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 80013c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f7ff fd0c 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 80013d2:	2108      	movs	r1, #8
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f7ff fd07 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 80013dc:	2110      	movs	r1, #16
 80013de:	4802      	ldr	r0, [pc, #8]	; (80013e8 <set_H+0x3c>)
 80013e0:	f7ff fd03 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	48000400 	.word	0x48000400

080013ec <set_h>:

void set_h(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	//	0	0	1	0	1	1	1

	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 80013f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f7ff fcf7 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f7ff fcf1 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 8001408:	2108      	movs	r1, #8
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f7ff fcec 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 8001412:	2110      	movs	r1, #16
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <set_h+0x34>)
 8001416:	f7ff fce8 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	48000400 	.word	0x48000400

08001424 <set_I>:

void set_I(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	//	0	0	0	0	1	1	0

	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001430:	f7ff fcdb 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 8001434:	2108      	movs	r1, #8
 8001436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143a:	f7ff fcd6 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <set_J>:


void set_J(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	//	0	1	1	1	1	0	0

	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 8001448:	2101      	movs	r1, #1
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f7ff fccc 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 8001452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f7ff fcc6 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 800145e:	2120      	movs	r1, #32
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <set_J+0x34>)
 8001462:	f7ff fcc2 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800146a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146e:	f7ff fcbc 	bl	8000dea <LL_GPIO_ResetOutputPin>


}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	48000400 	.word	0x48000400

0800147c <set_K>:

void set_K(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	//

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 8001480:	2102      	movs	r1, #2
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f7ff fcb0 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001492:	f7ff fcaa 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f7ff fca4 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 80014a2:	2108      	movs	r1, #8
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f7ff fc9f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 80014ac:	2110      	movs	r1, #16
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <set_K+0x3c>)
 80014b0:	f7ff fc9b 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	48000400 	.word	0x48000400

080014bc <set_L>:

void set_L(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	//	0	0	0	1	1	1	0


	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 80014c0:	2120      	movs	r1, #32
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <set_L+0x28>)
 80014c4:	f7ff fc91 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 80014c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d0:	f7ff fc8b 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 80014d4:	2108      	movs	r1, #8
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f7ff fc86 	bl	8000dea <LL_GPIO_ResetOutputPin>


}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	48000400 	.word	0x48000400

080014e8 <set_M>:

void set_M(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	//

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 80014ec:	2102      	movs	r1, #2
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f7ff fc7a 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 80014f6:	2101      	movs	r1, #1
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f7ff fc75 	bl	8000dea <LL_GPIO_ResetOutputPin>

	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 8001500:	2120      	movs	r1, #32
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <set_M+0x30>)
 8001504:	f7ff fc71 	bl	8000dea <LL_GPIO_ResetOutputPin>

	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 8001508:	2108      	movs	r1, #8
 800150a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150e:	f7ff fc6c 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	48000400 	.word	0x48000400

0800151c <set_n>:

void set_n(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	//	0	0	1	0	1	0	1


	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 8001520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f7ff fc5f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 800152c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f7ff fc59 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 8001538:	2110      	movs	r1, #16
 800153a:	4802      	ldr	r0, [pc, #8]	; (8001544 <set_n+0x28>)
 800153c:	f7ff fc55 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	48000400 	.word	0x48000400

08001548 <set_O>:

void set_O(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	//	1	1	1	1	1	1	0

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 800154c:	2102      	movs	r1, #2
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f7ff fc4a 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 8001556:	2101      	movs	r1, #1
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f7ff fc45 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 8001560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f7ff fc3f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 800156c:	2120      	movs	r1, #32
 800156e:	4808      	ldr	r0, [pc, #32]	; (8001590 <set_O+0x48>)
 8001570:	f7ff fc3b 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f7ff fc35 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 8001580:	2108      	movs	r1, #8
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f7ff fc30 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	48000400 	.word	0x48000400

08001594 <set_o>:

void set_o(void) {
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	//	0	0	1	1	1	0	1

	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 8001598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a0:	f7ff fc23 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 80015a4:	2120      	movs	r1, #32
 80015a6:	4807      	ldr	r0, [pc, #28]	; (80015c4 <set_o+0x30>)
 80015a8:	f7ff fc1f 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 80015ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f7ff fc19 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 80015b8:	2110      	movs	r1, #16
 80015ba:	4802      	ldr	r0, [pc, #8]	; (80015c4 <set_o+0x30>)
 80015bc:	f7ff fc15 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	48000400 	.word	0x48000400

080015c8 <set_P>:

void set_P(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	//	1	1	0	0	1	1	1

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 80015cc:	2102      	movs	r1, #2
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f7ff fc0a 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 80015d6:	2101      	movs	r1, #1
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f7ff fc05 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 80015e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f7ff fbff 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 80015ec:	2108      	movs	r1, #8
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f7ff fbfa 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 80015f6:	2110      	movs	r1, #16
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <set_P+0x3c>)
 80015fa:	f7ff fbf6 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	48000400 	.word	0x48000400

08001608 <set_q>:

void set_q(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	//	1	1	1	0	0	1	1

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 800160c:	2102      	movs	r1, #2
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f7ff fbea 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 8001616:	2101      	movs	r1, #1
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f7ff fbe5 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f7ff fbdf 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 800162c:	2108      	movs	r1, #8
 800162e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001632:	f7ff fbda 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 8001636:	2110      	movs	r1, #16
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <set_q+0x3c>)
 800163a:	f7ff fbd6 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	48000400 	.word	0x48000400

08001648 <set_r>:

void set_r(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	//	0	0	0	0	1	0	1


	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 800164c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f7ff fbc9 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 8001658:	2110      	movs	r1, #16
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <set_r+0x1c>)
 800165c:	f7ff fbc5 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	48000400 	.word	0x48000400

08001668 <set_S>:

void set_S(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	//	1	0	1	1	0	1	1

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 800166c:	2102      	movs	r1, #2
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f7ff fbba 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 8001676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f7ff fbb4 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 8001682:	2120      	movs	r1, #32
 8001684:	4806      	ldr	r0, [pc, #24]	; (80016a0 <set_S+0x38>)
 8001686:	f7ff fbb0 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 800168a:	2108      	movs	r1, #8
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f7ff fbab 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 8001694:	2110      	movs	r1, #16
 8001696:	4802      	ldr	r0, [pc, #8]	; (80016a0 <set_S+0x38>)
 8001698:	f7ff fba7 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	48000400 	.word	0x48000400

080016a4 <set_t>:

void set_t(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	//	0	0	0	1	1	1	1


	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 80016a8:	2120      	movs	r1, #32
 80016aa:	480a      	ldr	r0, [pc, #40]	; (80016d4 <set_t+0x30>)
 80016ac:	f7ff fb9d 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 80016b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f7ff fb97 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 80016bc:	2108      	movs	r1, #8
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f7ff fb92 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 80016c6:	2110      	movs	r1, #16
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <set_t+0x30>)
 80016ca:	f7ff fb8e 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	48000400 	.word	0x48000400

080016d8 <set_U>:

void set_U(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	//	0	1	1	1	1	1	0


	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 80016dc:	2101      	movs	r1, #1
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f7ff fb82 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 80016e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f7ff fb7c 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 80016f2:	2120      	movs	r1, #32
 80016f4:	4807      	ldr	r0, [pc, #28]	; (8001714 <set_U+0x3c>)
 80016f6:	f7ff fb78 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 80016fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f7ff fb72 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 8001706:	2108      	movs	r1, #8
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f7ff fb6d 	bl	8000dea <LL_GPIO_ResetOutputPin>


}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	48000400 	.word	0x48000400

08001718 <set_u>:

void set_u(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	//	0	0	1	1	1	0	0


	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 800171c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001724:	f7ff fb61 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 8001728:	2120      	movs	r1, #32
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <set_u+0x28>)
 800172c:	f7ff fb5d 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f7ff fb57 	bl	8000dea <LL_GPIO_ResetOutputPin>


}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	48000400 	.word	0x48000400

08001744 <set_V>:

void set_V(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	//


	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 8001748:	2101      	movs	r1, #1
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f7ff fb4c 	bl	8000dea <LL_GPIO_ResetOutputPin>

	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 8001752:	2120      	movs	r1, #32
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <set_V+0x24>)
 8001756:	f7ff fb48 	bl	8000dea <LL_GPIO_ResetOutputPin>

	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 800175a:	2108      	movs	r1, #8
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f7ff fb43 	bl	8000dea <LL_GPIO_ResetOutputPin>


}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	48000400 	.word	0x48000400

0800176c <set_W>:

void set_W(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	//

	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 8001770:	2101      	movs	r1, #1
 8001772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001776:	f7ff fb38 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 800177a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f7ff fb32 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 8001786:	2120      	movs	r1, #32
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <set_W+0x44>)
 800178a:	f7ff fb2e 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 800178e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f7ff fb28 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 800179a:	2108      	movs	r1, #8
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f7ff fb23 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 80017a4:	2110      	movs	r1, #16
 80017a6:	4802      	ldr	r0, [pc, #8]	; (80017b0 <set_W+0x44>)
 80017a8:	f7ff fb1f 	bl	8000dea <LL_GPIO_ResetOutputPin>


}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	48000400 	.word	0x48000400

080017b4 <set_X>:

void set_X(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	//

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 80017b8:	2102      	movs	r1, #2
 80017ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017be:	f7ff fb14 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 80017c2:	2120      	movs	r1, #32
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <set_X+0x24>)
 80017c6:	f7ff fb10 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 80017ca:	2110      	movs	r1, #16
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <set_X+0x24>)
 80017ce:	f7ff fb0c 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	48000400 	.word	0x48000400

080017dc <set_y>:

void set_y(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	//	0	1	1	1	0	1	1

	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 80017e0:	2101      	movs	r1, #1
 80017e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e6:	f7ff fb00 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN); //C
 80017ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f7ff fafa 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 80017f6:	2120      	movs	r1, #32
 80017f8:	4806      	ldr	r0, [pc, #24]	; (8001814 <set_y+0x38>)
 80017fa:	f7ff faf6 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN); //F
 80017fe:	2108      	movs	r1, #8
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f7ff faf1 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 8001808:	2110      	movs	r1, #16
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <set_y+0x38>)
 800180c:	f7ff faed 	bl	8000dea <LL_GPIO_ResetOutputPin>

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	48000400 	.word	0x48000400

08001818 <set_Z>:

void set_Z(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	//

	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN); //A
 800181c:	2102      	movs	r1, #2
 800181e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001822:	f7ff fae2 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN); //B
 8001826:	2101      	movs	r1, #1
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f7ff fadd 	bl	8000dea <LL_GPIO_ResetOutputPin>

	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN); //D
 8001830:	2120      	movs	r1, #32
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <set_Z+0x38>)
 8001834:	f7ff fad9 	bl	8000dea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN); //E
 8001838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f7ff fad3 	bl	8000dea <LL_GPIO_ResetOutputPin>

	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN); //G
 8001844:	2110      	movs	r1, #16
 8001846:	4802      	ldr	r0, [pc, #8]	; (8001850 <set_Z+0x38>)
 8001848:	f7ff facf 	bl	8000dea <LL_GPIO_ResetOutputPin>


}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	48000400 	.word	0x48000400

08001854 <displayChar>:

/**
 * Pre-process number before it is displayed. Extract digits of the number
 */
void displayChar(char* message)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++){
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e034      	b.n	80018cc <displayChar+0x78>


		switch(i){
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d823      	bhi.n	80018b0 <displayChar+0x5c>
 8001868:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <displayChar+0x1c>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	080018a5 	.word	0x080018a5
 8001874:	08001899 	.word	0x08001899
 8001878:	0800188d 	.word	0x0800188d
 800187c:	08001881 	.word	0x08001881
		case 3:
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001880:	2104      	movs	r1, #4
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f7ff faa2 	bl	8000dce <LL_GPIO_SetOutputPin>
			/*LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);*/
			break;
 800188a:	e011      	b.n	80018b0 <displayChar+0x5c>
		case 2:
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6);
 800188c:	2140      	movs	r1, #64	; 0x40
 800188e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001892:	f7ff fa9c 	bl	8000dce <LL_GPIO_SetOutputPin>
			/*LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);*/
			break;
 8001896:	e00b      	b.n	80018b0 <displayChar+0x5c>
		case 1:
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001898:	2110      	movs	r1, #16
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f7ff fa96 	bl	8000dce <LL_GPIO_SetOutputPin>
			/*LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);*/
			break;
 80018a2:	e005      	b.n	80018b0 <displayChar+0x5c>
		case 0:
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80018a4:	2120      	movs	r1, #32
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018aa:	f7ff fa90 	bl	8000dce <LL_GPIO_SetOutputPin>
			/*LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);*/
			break;
 80018ae:	bf00      	nop
		}




		decode(message[i]);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f80f 	bl	80018dc <decode>

		resetDigits();
 80018be:	f7ff faff 	bl	8000ec0 <resetDigits>
		resetSegments();
 80018c2:	f7ff faa1 	bl	8000e08 <resetSegments>
	for (int i = 0; i < 4; i++){
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3301      	adds	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	ddc7      	ble.n	8001862 <displayChar+0xe>
	}

}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop

080018dc <decode>:

void decode(char character)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
	switch(character)
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	3b30      	subs	r3, #48	; 0x30
 80018ea:	2b4a      	cmp	r3, #74	; 0x4a
 80018ec:	f200 8115 	bhi.w	8001b1a <decode+0x23e>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <decode+0x1c>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	08001b15 	.word	0x08001b15
 80018fc:	08001adf 	.word	0x08001adf
 8001900:	08001ae5 	.word	0x08001ae5
 8001904:	08001aeb 	.word	0x08001aeb
 8001908:	08001af1 	.word	0x08001af1
 800190c:	08001af7 	.word	0x08001af7
 8001910:	08001afd 	.word	0x08001afd
 8001914:	08001b03 	.word	0x08001b03
 8001918:	08001b09 	.word	0x08001b09
 800191c:	08001b0f 	.word	0x08001b0f
 8001920:	08001b1b 	.word	0x08001b1b
 8001924:	08001b1b 	.word	0x08001b1b
 8001928:	08001b1b 	.word	0x08001b1b
 800192c:	08001b1b 	.word	0x08001b1b
 8001930:	08001b1b 	.word	0x08001b1b
 8001934:	08001b1b 	.word	0x08001b1b
 8001938:	08001b1b 	.word	0x08001b1b
 800193c:	08001a25 	.word	0x08001a25
 8001940:	08001a31 	.word	0x08001a31
 8001944:	08001a37 	.word	0x08001a37
 8001948:	08001a43 	.word	0x08001a43
 800194c:	08001a49 	.word	0x08001a49
 8001950:	08001a4f 	.word	0x08001a4f
 8001954:	08001a55 	.word	0x08001a55
 8001958:	08001a5b 	.word	0x08001a5b
 800195c:	08001a67 	.word	0x08001a67
 8001960:	08001a6d 	.word	0x08001a6d
 8001964:	08001a73 	.word	0x08001a73
 8001968:	08001a79 	.word	0x08001a79
 800196c:	08001a7f 	.word	0x08001a7f
 8001970:	08001a85 	.word	0x08001a85
 8001974:	08001a8b 	.word	0x08001a8b
 8001978:	08001a97 	.word	0x08001a97
 800197c:	08001a9d 	.word	0x08001a9d
 8001980:	08001aa3 	.word	0x08001aa3
 8001984:	08001aa9 	.word	0x08001aa9
 8001988:	08001aaf 	.word	0x08001aaf
 800198c:	08001ab5 	.word	0x08001ab5
 8001990:	08001ac1 	.word	0x08001ac1
 8001994:	08001ac7 	.word	0x08001ac7
 8001998:	08001acd 	.word	0x08001acd
 800199c:	08001ad3 	.word	0x08001ad3
 80019a0:	08001ad9 	.word	0x08001ad9
 80019a4:	08001b1b 	.word	0x08001b1b
 80019a8:	08001b1b 	.word	0x08001b1b
 80019ac:	08001b1b 	.word	0x08001b1b
 80019b0:	08001b1b 	.word	0x08001b1b
 80019b4:	08001b1b 	.word	0x08001b1b
 80019b8:	08001b1b 	.word	0x08001b1b
 80019bc:	08001a2b 	.word	0x08001a2b
 80019c0:	08001a31 	.word	0x08001a31
 80019c4:	08001a3d 	.word	0x08001a3d
 80019c8:	08001a43 	.word	0x08001a43
 80019cc:	08001a49 	.word	0x08001a49
 80019d0:	08001a4f 	.word	0x08001a4f
 80019d4:	08001a55 	.word	0x08001a55
 80019d8:	08001a61 	.word	0x08001a61
 80019dc:	08001a67 	.word	0x08001a67
 80019e0:	08001a6d 	.word	0x08001a6d
 80019e4:	08001a73 	.word	0x08001a73
 80019e8:	08001a79 	.word	0x08001a79
 80019ec:	08001a7f 	.word	0x08001a7f
 80019f0:	08001a85 	.word	0x08001a85
 80019f4:	08001a91 	.word	0x08001a91
 80019f8:	08001a97 	.word	0x08001a97
 80019fc:	08001a9d 	.word	0x08001a9d
 8001a00:	08001aa3 	.word	0x08001aa3
 8001a04:	08001aa9 	.word	0x08001aa9
 8001a08:	08001aaf 	.word	0x08001aaf
 8001a0c:	08001abb 	.word	0x08001abb
 8001a10:	08001ac1 	.word	0x08001ac1
 8001a14:	08001ac7 	.word	0x08001ac7
 8001a18:	08001acd 	.word	0x08001acd
 8001a1c:	08001ad3 	.word	0x08001ad3
 8001a20:	08001ad9 	.word	0x08001ad9
	{
	case 'A':
		set_A();
 8001a24:	f7ff fbb2 	bl	800118c <set_A>
		break;
 8001a28:	e077      	b.n	8001b1a <decode+0x23e>
	case 'a':
		set_a();
 8001a2a:	f7ff fbd5 	bl	80011d8 <set_a>
		break;
 8001a2e:	e074      	b.n	8001b1a <decode+0x23e>
	case 'b':
	case 'B':
		set_b();
 8001a30:	f7ff fbf6 	bl	8001220 <set_b>
		break;
 8001a34:	e071      	b.n	8001b1a <decode+0x23e>
	case 'C':
		set_C();
 8001a36:	f7ff fc13 	bl	8001260 <set_C>
		break;
 8001a3a:	e06e      	b.n	8001b1a <decode+0x23e>
	case 'c':
		set_c();
 8001a3c:	f7ff fc2a 	bl	8001294 <set_c>
		break;
 8001a40:	e06b      	b.n	8001b1a <decode+0x23e>
	case 'd':
	case 'D':
		set_d();
 8001a42:	f7ff fc3b 	bl	80012bc <set_d>
		break;
 8001a46:	e068      	b.n	8001b1a <decode+0x23e>
	case 'E':
	case 'e':
		set_E();
 8001a48:	f7ff fc58 	bl	80012fc <set_E>
		break;
 8001a4c:	e065      	b.n	8001b1a <decode+0x23e>
	case 'F':
	case 'f':
		set_F();
 8001a4e:	f7ff fc73 	bl	8001338 <set_F>
		break;
 8001a52:	e062      	b.n	8001b1a <decode+0x23e>
	case 'G':
	case 'g':
		set_G();
 8001a54:	f7ff fc8a 	bl	800136c <set_G>
		break;
 8001a58:	e05f      	b.n	8001b1a <decode+0x23e>
	case 'H':
		set_H();
 8001a5a:	f7ff fca7 	bl	80013ac <set_H>
		break;
 8001a5e:	e05c      	b.n	8001b1a <decode+0x23e>
	case 'h':
		set_h();
 8001a60:	f7ff fcc4 	bl	80013ec <set_h>
		break;
 8001a64:	e059      	b.n	8001b1a <decode+0x23e>
	case 'I':
	case 'i':
		set_I();
 8001a66:	f7ff fcdd 	bl	8001424 <set_I>
		break;
 8001a6a:	e056      	b.n	8001b1a <decode+0x23e>
	case 'J':
	case 'j':
		set_J();
 8001a6c:	f7ff fcea 	bl	8001444 <set_J>
		break;
 8001a70:	e053      	b.n	8001b1a <decode+0x23e>
	case 'K':
	case 'k':
		set_K();
 8001a72:	f7ff fd03 	bl	800147c <set_K>
		break;
 8001a76:	e050      	b.n	8001b1a <decode+0x23e>
	case 'L':
	case 'l':
		set_L();
 8001a78:	f7ff fd20 	bl	80014bc <set_L>
		break;
 8001a7c:	e04d      	b.n	8001b1a <decode+0x23e>
	case 'M':
	case 'm':
		set_M();
 8001a7e:	f7ff fd33 	bl	80014e8 <set_M>
		break;
 8001a82:	e04a      	b.n	8001b1a <decode+0x23e>
	case 'n':
	case 'N':
		set_n();
 8001a84:	f7ff fd4a 	bl	800151c <set_n>
		break;
 8001a88:	e047      	b.n	8001b1a <decode+0x23e>
	case 'O':
		set_O();
 8001a8a:	f7ff fd5d 	bl	8001548 <set_O>
		break;
 8001a8e:	e044      	b.n	8001b1a <decode+0x23e>
	case 'o':
		set_o();
 8001a90:	f7ff fd80 	bl	8001594 <set_o>
		break;
 8001a94:	e041      	b.n	8001b1a <decode+0x23e>
	case 'P':
	case 'p':
		set_P();
 8001a96:	f7ff fd97 	bl	80015c8 <set_P>
		break;
 8001a9a:	e03e      	b.n	8001b1a <decode+0x23e>
	case 'q':
	case 'Q':
		set_q();
 8001a9c:	f7ff fdb4 	bl	8001608 <set_q>
		break;
 8001aa0:	e03b      	b.n	8001b1a <decode+0x23e>
	case 'r':
	case 'R':
		set_r();
 8001aa2:	f7ff fdd1 	bl	8001648 <set_r>
		break;
 8001aa6:	e038      	b.n	8001b1a <decode+0x23e>
	case 'S':
	case 's':
		set_S();
 8001aa8:	f7ff fdde 	bl	8001668 <set_S>
		break;
 8001aac:	e035      	b.n	8001b1a <decode+0x23e>
	case 't':
	case 'T':
		set_t();
 8001aae:	f7ff fdf9 	bl	80016a4 <set_t>
		break;
 8001ab2:	e032      	b.n	8001b1a <decode+0x23e>
	case 'U':
		set_U();
 8001ab4:	f7ff fe10 	bl	80016d8 <set_U>
		break;
 8001ab8:	e02f      	b.n	8001b1a <decode+0x23e>
	case 'u':
		set_u();
 8001aba:	f7ff fe2d 	bl	8001718 <set_u>
		break;
 8001abe:	e02c      	b.n	8001b1a <decode+0x23e>
	case 'V':
	case 'v':
		set_V();
 8001ac0:	f7ff fe40 	bl	8001744 <set_V>
		break;
 8001ac4:	e029      	b.n	8001b1a <decode+0x23e>
	case 'W':
	case 'w':
		set_W();
 8001ac6:	f7ff fe51 	bl	800176c <set_W>
		break;
 8001aca:	e026      	b.n	8001b1a <decode+0x23e>
	case 'X':
	case 'x':
		set_X();
 8001acc:	f7ff fe72 	bl	80017b4 <set_X>
		break;
 8001ad0:	e023      	b.n	8001b1a <decode+0x23e>
	case 'y':
	case 'Y':
		set_y();
 8001ad2:	f7ff fe83 	bl	80017dc <set_y>
		break;
 8001ad6:	e020      	b.n	8001b1a <decode+0x23e>
	case 'Z':
	case 'z':
		set_Z();
 8001ad8:	f7ff fe9e 	bl	8001818 <set_Z>
		break;
 8001adc:	e01d      	b.n	8001b1a <decode+0x23e>
	case '1':
		set_1();
 8001ade:	f7ff fa29 	bl	8000f34 <set_1>
		break;
 8001ae2:	e01a      	b.n	8001b1a <decode+0x23e>
	case '2':
		set_2();
 8001ae4:	f7ff fa36 	bl	8000f54 <set_2>
		break;
 8001ae8:	e017      	b.n	8001b1a <decode+0x23e>
	case '3':
		set_3();
 8001aea:	f7ff fa51 	bl	8000f90 <set_3>
		break;
 8001aee:	e014      	b.n	8001b1a <decode+0x23e>
	case '4':
		set_4();
 8001af0:	f7ff fa6c 	bl	8000fcc <set_4>
		break;
 8001af4:	e011      	b.n	8001b1a <decode+0x23e>
	case '5':
		set_5();
 8001af6:	f7ff fa83 	bl	8001000 <set_5>
		break;
 8001afa:	e00e      	b.n	8001b1a <decode+0x23e>
	case '6':
		set_6();
 8001afc:	f7ff fa9e 	bl	800103c <set_6>
		break;
 8001b00:	e00b      	b.n	8001b1a <decode+0x23e>
	case '7':
		set_7();
 8001b02:	f7ff fabf 	bl	8001084 <set_7>
		break;
 8001b06:	e008      	b.n	8001b1a <decode+0x23e>
	case '8':
		set_8();
 8001b08:	f7ff fad0 	bl	80010ac <set_8>
		break;
 8001b0c:	e005      	b.n	8001b1a <decode+0x23e>
	case '9':
		set_9();
 8001b0e:	f7ff faf7 	bl	8001100 <set_9>
		break;
 8001b12:	e002      	b.n	8001b1a <decode+0x23e>
	case '0':
		set_0();
 8001b14:	f7ff fb14 	bl	8001140 <set_0>
		break;
 8001b18:	bf00      	nop

	}

}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop

08001b24 <TIM3_IRQHandler>:



//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001b28:	4806      	ldr	r0, [pc, #24]	; (8001b44 <TIM3_IRQHandler+0x20>)
 8001b2a:	f7ff f93d 	bl	8000da8 <LL_TIM_IsActiveFlag_UPDATE>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <TIM3_IRQHandler+0x16>
	{
		displayChar(string_to_display);
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <TIM3_IRQHandler+0x24>)
 8001b36:	f7ff fe8d 	bl	8001854 <displayChar>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001b3a:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM3_IRQHandler+0x20>)
 8001b3c:	f7ff f926 	bl	8000d8c <LL_TIM_ClearFlag_UPDATE>
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40000400 	.word	0x40000400
 8001b48:	20000048 	.word	0x20000048

08001b4c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4013      	ands	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000

08001b7c <LL_GPIO_ResetOutputPin>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001bae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001bb2:	f7ff ffcb 	bl	8001b4c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001bb6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001bba:	f7ff ffc7 	bl	8001b4c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001bbe:	f640 111b 	movw	r1, #2331	; 0x91b
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f7ff ffd9 	bl	8001b7c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001bca:	2132      	movs	r1, #50	; 0x32
 8001bcc:	4813      	ldr	r0, [pc, #76]	; (8001c1c <MX_GPIO_Init+0x84>)
 8001bce:	f7ff ffd5 	bl	8001b7c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001bd2:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8001bd6:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf0:	f7fe fbed 	bl	80003ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001bf4:	2332      	movs	r3, #50	; 0x32
 8001bf6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <MX_GPIO_Init+0x84>)
 8001c0e:	f7fe fbde 	bl	80003ce <LL_GPIO_Init>

}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	48000400 	.word	0x48000400

08001c20 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <LL_RCC_HSI_Enable+0x1c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <LL_RCC_HSI_Enable+0x1c>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000

08001c88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <LL_RCC_HSI_IsReady+0x20>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000

08001cac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4904      	ldr	r1, [pc, #16]	; (8001cd4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <LL_RCC_SetSysClkSource+0x24>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 0203 	bic.w	r2, r3, #3
 8001ce8:	4904      	ldr	r1, [pc, #16]	; (8001cfc <LL_RCC_SetSysClkSource+0x24>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40021000 	.word	0x40021000

08001d00 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <LL_RCC_GetSysClkSource+0x18>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 030c 	and.w	r3, r3, #12
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000

08001d1c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <LL_RCC_SetAHBPrescaler+0x24>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	4904      	ldr	r1, [pc, #16]	; (8001d40 <LL_RCC_SetAHBPrescaler+0x24>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000

08001d44 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d54:	4904      	ldr	r1, [pc, #16]	; (8001d68 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40021000 	.word	0x40021000

08001d6c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7c:	4904      	ldr	r1, [pc, #16]	; (8001d90 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40021000 	.word	0x40021000

08001d94 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4013      	ands	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	4907      	ldr	r1, [pc, #28]	; (8001df0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000

08001df4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <LL_FLASH_SetLatency+0x24>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 0207 	bic.w	r2, r3, #7
 8001e04:	4904      	ldr	r1, [pc, #16]	; (8001e18 <LL_FLASH_SetLatency+0x24>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40022000 	.word	0x40022000

08001e1c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <LL_FLASH_GetLatency+0x18>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40022000 	.word	0x40022000

08001e38 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d106      	bne.n	8001e54 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <LL_SYSTICK_SetClkSource+0x34>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <LL_SYSTICK_SetClkSource+0x34>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001e52:	e005      	b.n	8001e60 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <LL_SYSTICK_SetClkSource+0x34>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <LL_SYSTICK_SetClkSource+0x34>)
 8001e5a:	f023 0304 	bic.w	r3, r3, #4
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <LL_SYSTICK_EnableIT+0x1c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <LL_SYSTICK_EnableIT+0x1c>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <main>:
char string[]= "KRISTINAOKIENKOVA92618";
char string_to_display[5]= "";
uint64_t saved_time;

int main(void)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff94 	bl	8001dc4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001e9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001ea0:	f7ff ff78 	bl	8001d94 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f7ff febb 	bl	8001c20 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001eaa:	f000 f84d 	bl	8001f48 <SystemClock_Config>

  MX_GPIO_Init();
 8001eae:	f7ff fe73 	bl	8001b98 <MX_GPIO_Init>

  setSegments();
 8001eb2:	f7fe ffd7 	bl	8000e64 <setSegments>
  setDigits();
 8001eb6:	f7ff f820 	bl	8000efa <setDigits>

  LL_mDelay(2000);
 8001eba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ebe:	f7fe ff31 	bl	8000d24 <LL_mDelay>

  resetDigits();
 8001ec2:	f7fe fffd 	bl	8000ec0 <resetDigits>
  resetSegments();
 8001ec6:	f7fe ff9f 	bl	8000e08 <resetSegments>

  MX_TIM3_Init();
 8001eca:	f000 fa55 	bl	8002378 <MX_TIM3_Init>

  int shift=0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
  int index=0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
	  	  }
	  }*/



	  LL_mDelay(500);
 8001ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eda:	f7fe ff23 	bl	8000d24 <LL_mDelay>

	  index=shift;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
	  for(int i = 0; i < 4; i++){
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	e019      	b.n	8001f1c <main+0x8c>

		  if(index+i>=(strlen(string))){
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	461c      	mov	r4, r3
 8001ef0:	4813      	ldr	r0, [pc, #76]	; (8001f40 <main+0xb0>)
 8001ef2:	f7fe f969 	bl	80001c8 <strlen>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	429c      	cmp	r4, r3
 8001efa:	d302      	bcc.n	8001f02 <main+0x72>
			  index=0-i;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	425b      	negs	r3, r3
 8001f00:	60bb      	str	r3, [r7, #8]

		  }


		  string_to_display[i]=string[index+i];
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <main+0xb0>)
 8001f0a:	5cd1      	ldrb	r1, [r2, r3]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <main+0xb4>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	460a      	mov	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < 4; i++){
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	dde2      	ble.n	8001ee8 <main+0x58>


	  }

	  if(shift<(strlen(string))){
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <main+0xb0>)
 8001f24:	f7fe f950 	bl	80001c8 <strlen>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d903      	bls.n	8001f38 <main+0xa8>
		  shift++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3301      	adds	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e7ce      	b.n	8001ed6 <main+0x46>
	  }
	  else
	  {
		  shift=0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
	  LL_mDelay(500);
 8001f3c:	e7cb      	b.n	8001ed6 <main+0x46>
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000048 	.word	0x20000048

08001f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff ff51 	bl	8001df4 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001f52:	f7ff ff63 	bl	8001e1c <LL_FLASH_GetLatency>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001f5c:	f000 f82c 	bl	8001fb8 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001f60:	f7ff fe82 	bl	8001c68 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001f64:	bf00      	nop
 8001f66:	f7ff fe8f 	bl	8001c88 <LL_RCC_HSI_IsReady>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d1fa      	bne.n	8001f66 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001f70:	2010      	movs	r0, #16
 8001f72:	f7ff fe9b 	bl	8001cac <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f7ff fed0 	bl	8001d1c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff fee1 	bl	8001d44 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff fef2 	bl	8001d6c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fea5 	bl	8001cd8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001f8e:	bf00      	nop
 8001f90:	f7ff feb6 	bl	8001d00 <LL_RCC_GetSysClkSource>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1fa      	bne.n	8001f90 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <SystemClock_Config+0x6c>)
 8001f9c:	f7fe feb4 	bl	8000d08 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001fa0:	2004      	movs	r0, #4
 8001fa2:	f7ff ff49 	bl	8001e38 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8001fa6:	f7ff ff63 	bl	8001e70 <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 8001faa:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <SystemClock_Config+0x6c>)
 8001fac:	f7fe fede 	bl	8000d6c <LL_SetSystemCoreClock>
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	007a1200 	.word	0x007a1200

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <HardFault_Handler+0x4>

08001fda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <MemManage_Handler+0x4>

08001fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <BusFault_Handler+0x4>

08001fe6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <UsageFault_Handler+0x4>

08001fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002018:	b490      	push	{r4, r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <SysTick_Handler+0x20>)
 800201e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002022:	1c4b      	adds	r3, r1, #1
 8002024:	f142 0400 	adc.w	r4, r2, #0
 8002028:	4a03      	ldr	r2, [pc, #12]	; (8002038 <SysTick_Handler+0x20>)
 800202a:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	bc90      	pop	{r4, r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000040 	.word	0x20000040

0800203c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <SystemInit+0x84>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <SystemInit+0x84>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002050:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <SystemInit+0x88>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <SystemInit+0x88>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <SystemInit+0x88>)
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4918      	ldr	r1, [pc, #96]	; (80020c4 <SystemInit+0x88>)
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <SystemInit+0x8c>)
 8002064:	4013      	ands	r3, r2
 8002066:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <SystemInit+0x88>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <SystemInit+0x88>)
 800206e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <SystemInit+0x88>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <SystemInit+0x88>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <SystemInit+0x88>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <SystemInit+0x88>)
 800208a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800208e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <SystemInit+0x88>)
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <SystemInit+0x88>)
 8002096:	f023 030f 	bic.w	r3, r3, #15
 800209a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <SystemInit+0x88>)
 800209e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a0:	4908      	ldr	r1, [pc, #32]	; (80020c4 <SystemInit+0x88>)
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <SystemInit+0x90>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <SystemInit+0x88>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SystemInit+0x84>)
 80020b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020b4:	609a      	str	r2, [r3, #8]
#endif
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00
 80020c4:	40021000 	.word	0x40021000
 80020c8:	f87fc00c 	.word	0xf87fc00c
 80020cc:	ff00fccc 	.word	0xff00fccc

080020d0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	; (800211c <NVIC_EnableIRQ+0x30>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	da0b      	bge.n	800214c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	; (800216c <NVIC_SetPriority+0x4c>)
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	3b04      	subs	r3, #4
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800214a:	e009      	b.n	8002160 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <NVIC_SetPriority+0x50>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00
 8002170:	e000e100 	.word	0xe000e100

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <LL_APB1_GRP1_EnableClock>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021f2:	69da      	ldr	r2, [r3, #28]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4013      	ands	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	40021000 	.word	0x40021000

0800220c <LL_TIM_EnableCounter>:
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f043 0201 	orr.w	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	601a      	str	r2, [r3, #0]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_TIM_EnableARRPreload>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_TIM_OC_DisableFast>:
{
 800224c:	b4b0      	push	{r4, r5, r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d028      	beq.n	80022ae <LL_TIM_OC_DisableFast+0x62>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d023      	beq.n	80022aa <LL_TIM_OC_DisableFast+0x5e>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b10      	cmp	r3, #16
 8002266:	d01e      	beq.n	80022a6 <LL_TIM_OC_DisableFast+0x5a>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d019      	beq.n	80022a2 <LL_TIM_OC_DisableFast+0x56>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002274:	d013      	beq.n	800229e <LL_TIM_OC_DisableFast+0x52>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227c:	d00d      	beq.n	800229a <LL_TIM_OC_DisableFast+0x4e>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002284:	d007      	beq.n	8002296 <LL_TIM_OC_DisableFast+0x4a>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d101      	bne.n	8002292 <LL_TIM_OC_DisableFast+0x46>
 800228e:	2307      	movs	r3, #7
 8002290:	e00e      	b.n	80022b0 <LL_TIM_OC_DisableFast+0x64>
 8002292:	2308      	movs	r3, #8
 8002294:	e00c      	b.n	80022b0 <LL_TIM_OC_DisableFast+0x64>
 8002296:	2306      	movs	r3, #6
 8002298:	e00a      	b.n	80022b0 <LL_TIM_OC_DisableFast+0x64>
 800229a:	2305      	movs	r3, #5
 800229c:	e008      	b.n	80022b0 <LL_TIM_OC_DisableFast+0x64>
 800229e:	2304      	movs	r3, #4
 80022a0:	e006      	b.n	80022b0 <LL_TIM_OC_DisableFast+0x64>
 80022a2:	2303      	movs	r3, #3
 80022a4:	e004      	b.n	80022b0 <LL_TIM_OC_DisableFast+0x64>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e002      	b.n	80022b0 <LL_TIM_OC_DisableFast+0x64>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <LL_TIM_OC_DisableFast+0x64>
 80022ae:	2300      	movs	r3, #0
 80022b0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3318      	adds	r3, #24
 80022b6:	461a      	mov	r2, r3
 80022b8:	4629      	mov	r1, r5
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <LL_TIM_OC_DisableFast+0x94>)
 80022bc:	5c5b      	ldrb	r3, [r3, r1]
 80022be:	4413      	add	r3, r2
 80022c0:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80022c2:	6822      	ldr	r2, [r4, #0]
 80022c4:	4629      	mov	r1, r5
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <LL_TIM_OC_DisableFast+0x98>)
 80022c8:	5c5b      	ldrb	r3, [r3, r1]
 80022ca:	4619      	mov	r1, r3
 80022cc:	2304      	movs	r3, #4
 80022ce:	408b      	lsls	r3, r1
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4013      	ands	r3, r2
 80022d4:	6023      	str	r3, [r4, #0]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bcb0      	pop	{r4, r5, r7}
 80022de:	4770      	bx	lr
 80022e0:	08002500 	.word	0x08002500
 80022e4:	0800250c 	.word	0x0800250c

080022e8 <LL_TIM_SetClockSource>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80022fa:	f023 0307 	bic.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_TIM_SetTriggerOutput>:
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	605a      	str	r2, [r3, #4]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_TIM_DisableMasterSlaveMode>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_TIM_EnableIT_UPDATE>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	60da      	str	r2, [r3, #12]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800237e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2220      	movs	r2, #32
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f89f 	bl	80024d8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800239a:	2002      	movs	r0, #2
 800239c:	f7ff ff1e 	bl	80021dc <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 80023a0:	f7ff fe96 	bl	80020d0 <NVIC_GetPriorityGrouping>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2202      	movs	r2, #2
 80023a8:	2102      	movs	r1, #2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fee2 	bl	8002174 <NVIC_EncodePriority>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4619      	mov	r1, r3
 80023b4:	201d      	movs	r0, #29
 80023b6:	f7ff feb3 	bl	8002120 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80023ba:	201d      	movs	r0, #29
 80023bc:	f7ff fe96 	bl	80020ec <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 799; 								//1kHz
 80023c0:	f240 331f 	movw	r3, #799	; 0x31f
 80023c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 9;								//1ms
 80023ca:	2309      	movs	r3, #9
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80023d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d6:	4619      	mov	r1, r3
 80023d8:	4817      	ldr	r0, [pc, #92]	; (8002438 <MX_TIM3_Init+0xc0>)
 80023da:	f7fe f901 	bl	80005e0 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 80023de:	4816      	ldr	r0, [pc, #88]	; (8002438 <MX_TIM3_Init+0xc0>)
 80023e0:	f7ff ff24 	bl	800222c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80023e4:	2100      	movs	r1, #0
 80023e6:	4814      	ldr	r0, [pc, #80]	; (8002438 <MX_TIM3_Init+0xc0>)
 80023e8:	f7ff ff7e 	bl	80022e8 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80023ec:	2310      	movs	r3, #16
 80023ee:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	461a      	mov	r2, r3
 8002404:	2101      	movs	r1, #1
 8002406:	480c      	ldr	r0, [pc, #48]	; (8002438 <MX_TIM3_Init+0xc0>)
 8002408:	f7fe f95e 	bl	80006c8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800240c:	2101      	movs	r1, #1
 800240e:	480a      	ldr	r0, [pc, #40]	; (8002438 <MX_TIM3_Init+0xc0>)
 8002410:	f7ff ff1c 	bl	800224c <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002414:	2100      	movs	r1, #0
 8002416:	4808      	ldr	r0, [pc, #32]	; (8002438 <MX_TIM3_Init+0xc0>)
 8002418:	f7ff ff7b 	bl	8002312 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800241c:	4806      	ldr	r0, [pc, #24]	; (8002438 <MX_TIM3_Init+0xc0>)
 800241e:	f7ff ff8b 	bl	8002338 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_TIM3_Init+0xc0>)
 8002424:	f7ff ff98 	bl	8002358 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002428:	4803      	ldr	r0, [pc, #12]	; (8002438 <MX_TIM3_Init+0xc0>)
 800242a:	f7ff feef 	bl	800220c <LL_TIM_EnableCounter>

}
 800242e:	bf00      	nop
 8002430:	3738      	adds	r7, #56	; 0x38
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40000400 	.word	0x40000400

0800243c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002440:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002442:	e003      	b.n	800244c <LoopCopyDataInit>

08002444 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002446:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002448:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800244a:	3104      	adds	r1, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <LoopForever+0xa>)
	ldr	r3, =_edata
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002450:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002452:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002454:	d3f6      	bcc.n	8002444 <CopyDataInit>
	ldr	r2, =_sbss
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002458:	e002      	b.n	8002460 <LoopFillZerobss>

0800245a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800245a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800245c:	f842 3b04 	str.w	r3, [r2], #4

08002460 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <LoopForever+0x16>)
	cmp	r2, r3
 8002462:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002464:	d3f9      	bcc.n	800245a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002466:	f7ff fde9 	bl	800203c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246a:	f000 f811 	bl	8002490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800246e:	f7ff fd0f 	bl	8001e90 <main>

08002472 <LoopForever>:

LoopForever:
    b LoopForever
 8002472:	e7fe      	b.n	8002472 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002474:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002478:	08002520 	.word	0x08002520
	ldr	r0, =_sdata
 800247c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002480:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8002484:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8002488:	20000050 	.word	0x20000050

0800248c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC1_2_IRQHandler>
	...

08002490 <__libc_init_array>:
 8002490:	b570      	push	{r4, r5, r6, lr}
 8002492:	4e0d      	ldr	r6, [pc, #52]	; (80024c8 <__libc_init_array+0x38>)
 8002494:	4c0d      	ldr	r4, [pc, #52]	; (80024cc <__libc_init_array+0x3c>)
 8002496:	1ba4      	subs	r4, r4, r6
 8002498:	10a4      	asrs	r4, r4, #2
 800249a:	2500      	movs	r5, #0
 800249c:	42a5      	cmp	r5, r4
 800249e:	d109      	bne.n	80024b4 <__libc_init_array+0x24>
 80024a0:	4e0b      	ldr	r6, [pc, #44]	; (80024d0 <__libc_init_array+0x40>)
 80024a2:	4c0c      	ldr	r4, [pc, #48]	; (80024d4 <__libc_init_array+0x44>)
 80024a4:	f000 f820 	bl	80024e8 <_init>
 80024a8:	1ba4      	subs	r4, r4, r6
 80024aa:	10a4      	asrs	r4, r4, #2
 80024ac:	2500      	movs	r5, #0
 80024ae:	42a5      	cmp	r5, r4
 80024b0:	d105      	bne.n	80024be <__libc_init_array+0x2e>
 80024b2:	bd70      	pop	{r4, r5, r6, pc}
 80024b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024b8:	4798      	blx	r3
 80024ba:	3501      	adds	r5, #1
 80024bc:	e7ee      	b.n	800249c <__libc_init_array+0xc>
 80024be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024c2:	4798      	blx	r3
 80024c4:	3501      	adds	r5, #1
 80024c6:	e7f2      	b.n	80024ae <__libc_init_array+0x1e>
 80024c8:	08002518 	.word	0x08002518
 80024cc:	08002518 	.word	0x08002518
 80024d0:	08002518 	.word	0x08002518
 80024d4:	0800251c 	.word	0x0800251c

080024d8 <memset>:
 80024d8:	4402      	add	r2, r0
 80024da:	4603      	mov	r3, r0
 80024dc:	4293      	cmp	r3, r2
 80024de:	d100      	bne.n	80024e2 <memset+0xa>
 80024e0:	4770      	bx	lr
 80024e2:	f803 1b01 	strb.w	r1, [r3], #1
 80024e6:	e7f9      	b.n	80024dc <memset+0x4>

080024e8 <_init>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	bf00      	nop
 80024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ee:	bc08      	pop	{r3}
 80024f0:	469e      	mov	lr, r3
 80024f2:	4770      	bx	lr

080024f4 <_fini>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr
